// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户类型枚举
enum UserType {
  ARTIST
  RESEARCHER
  INSTITUTION
  CURATOR
}

// 经验水平枚举
enum ExperienceLevel {
  EMERGING
  MID_CAREER
  ESTABLISHED
}

// 投稿信息类型枚举
enum SubmissionType {
  EXHIBITION
  RESIDENCY
  COMPETITION
  GRANT
  CONFERENCE
  PUBLICATION
  OTHER
}

// 投稿状态枚举
enum SubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// 用户表
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 用户类型和基本信息
  userType        UserType?
  experienceLevel ExperienceLevel?
  location        String?
  languages       String? // JSON string of languages
  website         String?
  socialMedia     Json? // JSON object for social media links

  // 艺术相关信息
  artistStatement String?
  artFields       String? // 艺术领域/专业方向 JSON string
  education       Json? // 教育背景 JSON
  exhibitions     Json? // 展览历史 JSON
  awards          Json? // 获奖经历 JSON

  // 关联关系
  portfolios    Portfolio[]
  submissions   UserSubmission[]
  aiMatches     AIMatch[]

  @@map("users")
}

// 作品集表
model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  medium      String? // 媒介类型
  dimensions  String? // 尺寸
  year        Int?
  imageUrl    String?
  fileUrl     String? // 作品文件URL
  tags        String? // 标签 JSON string
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

// 投稿信息表
model SubmissionInfo {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        SubmissionType
  organizer   String // 主办方
  deadline    DateTime
  location    String?
  website     String?
  email       String?
  phone       String?
  fee         Decimal? // 费用
  prize       String? // 奖金/福利
  requirements Json? // 投稿要求 JSON
  tags        String? // 标签 JSON string
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  userSubmissions UserSubmission[]
  aiMatches       AIMatch[]

  @@map("submission_infos")
}

// 用户投稿记录表
model UserSubmission {
  id               String           @id @default(cuid())
  userId           String
  submissionInfoId String
  status           SubmissionStatus @default(DRAFT)
  submittedAt      DateTime?
  notes            String? // 用户备注
  materials        Json? // 投稿材料 JSON
  response         String? // 回复结果
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // 关联关系
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissionInfo SubmissionInfo @relation(fields: [submissionInfoId], references: [id], onDelete: Cascade)

  @@unique([userId, submissionInfoId])
  @@map("user_submissions")
}

// AI 匹配记录表
model AIMatch {
  id               String  @id @default(cuid())
  userId           String
  submissionInfoId String
  matchScore       Float // 匹配分数 0-1
  reasons          Json? // 匹配原因 JSON
  isRecommended    Boolean @default(false)
  isViewed         Boolean @default(false)
  isApplied        Boolean @default(false)
  createdAt        DateTime @default(now())

  // 关联关系
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissionInfo SubmissionInfo @relation(fields: [submissionInfoId], references: [id], onDelete: Cascade)

  @@unique([userId, submissionInfoId])
  @@map("ai_matches")
}

// 数据源管理表
model DataSource {
  id          String   @id @default(cuid())
  name        String
  url         String
  type        String // 数据源类型：website, api, rss等
  isActive    Boolean  @default(true)
  lastCrawled DateTime?
  config      Json? // 爬虫配置 JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("data_sources")
}

// 爬虫任务记录表
model CrawlJob {
  id           String    @id @default(cuid())
  dataSourceId String?
  status       String // pending, running, completed, failed
  startedAt    DateTime?
  completedAt  DateTime?
  itemsFound   Int       @default(0)
  itemsAdded   Int       @default(0)
  errorMessage String?
  logs         Json? // 日志 JSON
  createdAt    DateTime  @default(now())

  @@map("crawl_jobs")
}

// InfoReceiver 相关表

// 原始消息表
model RawMessage {
  id           String    @id @default(cuid())
  source       String    // 消息来源：email, wechat, social等
  content      String    // 原始内容
  links        String?   // 链接列表 JSON string
  images       String?   // 图片列表 JSON string
  attachments  String?   // 附件列表 JSON string
  metadata     Json?     // 元数据
  status       String    @default("pending") // 处理状态
  processed    Boolean   @default(false) // 是否已处理
  resourceId   String?   // 关联的资源ID
  errorMessage String?   // 错误信息
  retryCount   Int       @default(0) // 重试次数
  priority     Int       @default(0) // 优先级
  scheduledAt  DateTime? // 计划处理时间
  processedAt  DateTime? // 实际处理时间
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // 关联关系
  processedResources ProcessedResource[]

  @@map("raw_messages")
}

// 处理后的资源表
model ProcessedResource {
  id            String   @id @default(cuid())
  rawMessageId  String?
  title         String?
  category      String?
  deadline      DateTime?
  location      String?
  organizer     String?
  description   String?
  requirements  String?
  fee           String?
  contact       String?
  originalUrl   String?
  confidence    Float    @default(0)
  reasoning     String?
  status        String   @default("pending") // pending, verified, duplicate, rejected
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  rawMessage RawMessage? @relation(fields: [rawMessageId], references: [id], onDelete: SetNull)

  @@map("processed_resources")
}

// 基础资源表
model BaseResource {
  id               String    @id @default(cuid())
  title            String
  category         String    // SubmissionType
  deadline         DateTime?
  eventDate        DateTime?
  endDate          DateTime?
  location         String?
  city             String?
  country          String?
  latitude         Float?
  longitude        Float?
  organizer        String?
  description      String?
  requirements     String?
  fee              String?
  prize            String?
  contact          String?
  email            String?
  phone            String?
  website          String?
  originalUrl      String?
  tags             String? // JSON string
  source           String    // MessageSource
  confidence       Float?
  confidenceLevel  String?   // ConfidenceLevel
  status           String    // ResourceStatus
  language         String?
  contentHash      String
  similarityHash   String?
  version          Int       @default(1)
  parentId         String?
  reviewedBy       String?
  reviewedAt       DateTime?
  reviewNotes      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([contentHash])
  @@map("base_resources")
}

// 解析任务表
model ParseTask {
  id             String    @id @default(cuid())
  messageId      String
  taskType       String    // TaskType
  priority       Int       @default(0)
  attempts       Int       @default(0)
  maxAttempts    Int       @default(3)
  status         String    // MessageStatus
  scheduledAt    DateTime
  startedAt      DateTime?
  completedAt    DateTime?
  processingTime Int?
  errorMessage   String?
  errorCode      String?
  result         Json?
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("parse_tasks")
}

// 解析规则表
model ParseRule {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String   // SubmissionType
  keywords     String? // JSON string
  patterns     Json?
  confidence   Float
  isActive     Boolean  @default(true)
  priority     Int      @default(0)
  language     String
  ruleType     String
  config       Json?
  successCount Int      @default(0)
  totalCount   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("parse_rules")
}

// 质量检查表
model QualityCheck {
  id          String    @id @default(cuid())
  resourceId  String
  checkType   String
  result      String    // 'PASS' | 'FAIL' | 'WARNING'
  score       Float?
  details     Json?
  suggestions String?
  automated   Boolean   @default(true)
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())

  @@map("quality_checks")
}
